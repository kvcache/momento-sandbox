// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cachepubsub.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Momento.Protos.CacheClient.Pubsub {
  /// <summary>
  /// For working with topics in a cache.
  /// Momento topics are conceptually located on a cache. They are best-effort multicast.
  /// To use them, create a cache then start subscribing and publishing!
  ///
  /// Momento topic subscriptions try to give you information about the quality of the
  ///   stream you are receiving. For example, you might miss messages if your network
  ///   is slow, or if some intermediate switch fails, or due to rate limiting. It is
  ///   also possible, though we try to avoid it, that messages could briefly come out
  ///   of order between subscribers.
  ///   We try to tell you when things like this happen via a Discontinuity in your
  ///   subscription stream. If you do not care about occasional discontinuities then
  ///   don't bother handling them! You might still want to log them just in case ;-)
  /// </summary>
  public static partial class Pubsub
  {
    static readonly string __ServiceName = "cache_client.pubsub.Pubsub";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Momento.Protos.CacheClient.Pubsub._PublishRequest> __Marshaller_cache_client_pubsub__PublishRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Momento.Protos.CacheClient.Pubsub._PublishRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Momento.Protos.CacheClient.Pubsub._Empty> __Marshaller_cache_client_pubsub__Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Momento.Protos.CacheClient.Pubsub._Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Momento.Protos.CacheClient.Pubsub._SubscriptionRequest> __Marshaller_cache_client_pubsub__SubscriptionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Momento.Protos.CacheClient.Pubsub._SubscriptionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Momento.Protos.CacheClient.Pubsub._SubscriptionItem> __Marshaller_cache_client_pubsub__SubscriptionItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Momento.Protos.CacheClient.Pubsub._SubscriptionItem.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Momento.Protos.CacheClient.Pubsub._PublishRequest, global::Momento.Protos.CacheClient.Pubsub._Empty> __Method_Publish = new grpc::Method<global::Momento.Protos.CacheClient.Pubsub._PublishRequest, global::Momento.Protos.CacheClient.Pubsub._Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Publish",
        __Marshaller_cache_client_pubsub__PublishRequest,
        __Marshaller_cache_client_pubsub__Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Momento.Protos.CacheClient.Pubsub._SubscriptionRequest, global::Momento.Protos.CacheClient.Pubsub._SubscriptionItem> __Method_Subscribe = new grpc::Method<global::Momento.Protos.CacheClient.Pubsub._SubscriptionRequest, global::Momento.Protos.CacheClient.Pubsub._SubscriptionItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Subscribe",
        __Marshaller_cache_client_pubsub__SubscriptionRequest,
        __Marshaller_cache_client_pubsub__SubscriptionItem);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Momento.Protos.CacheClient.Pubsub.CachepubsubReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Pubsub</summary>
    public partial class PubsubClient : grpc::ClientBase<PubsubClient>
    {
      /// <summary>Creates a new client for Pubsub</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PubsubClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Pubsub that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PubsubClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PubsubClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PubsubClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Publish a message to a topic.
      ///
      /// If a topic has no subscribers, then the effect of Publish MAY be either of:
      /// * It is dropped and the topic is nonexistent.
      /// * It is accepted to the topic as the next message.
      ///
      /// Publish() does not wait for subscribers to accept. It returns Ok upon accepting
      /// the topic value. It also returns Ok if there are no subscribers and the value
      /// happens to be dropped. Publish() can not guarantee delivery in theory but in
      /// practice it should almost always deliver to subscribers.
      ///
      /// REQUIRES HEADER authorization: Momento auth token
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Momento.Protos.CacheClient.Pubsub._Empty Publish(global::Momento.Protos.CacheClient.Pubsub._PublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Publish(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Publish a message to a topic.
      ///
      /// If a topic has no subscribers, then the effect of Publish MAY be either of:
      /// * It is dropped and the topic is nonexistent.
      /// * It is accepted to the topic as the next message.
      ///
      /// Publish() does not wait for subscribers to accept. It returns Ok upon accepting
      /// the topic value. It also returns Ok if there are no subscribers and the value
      /// happens to be dropped. Publish() can not guarantee delivery in theory but in
      /// practice it should almost always deliver to subscribers.
      ///
      /// REQUIRES HEADER authorization: Momento auth token
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Momento.Protos.CacheClient.Pubsub._Empty Publish(global::Momento.Protos.CacheClient.Pubsub._PublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Publish, null, options, request);
      }
      /// <summary>
      /// Publish a message to a topic.
      ///
      /// If a topic has no subscribers, then the effect of Publish MAY be either of:
      /// * It is dropped and the topic is nonexistent.
      /// * It is accepted to the topic as the next message.
      ///
      /// Publish() does not wait for subscribers to accept. It returns Ok upon accepting
      /// the topic value. It also returns Ok if there are no subscribers and the value
      /// happens to be dropped. Publish() can not guarantee delivery in theory but in
      /// practice it should almost always deliver to subscribers.
      ///
      /// REQUIRES HEADER authorization: Momento auth token
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Momento.Protos.CacheClient.Pubsub._Empty> PublishAsync(global::Momento.Protos.CacheClient.Pubsub._PublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Publish a message to a topic.
      ///
      /// If a topic has no subscribers, then the effect of Publish MAY be either of:
      /// * It is dropped and the topic is nonexistent.
      /// * It is accepted to the topic as the next message.
      ///
      /// Publish() does not wait for subscribers to accept. It returns Ok upon accepting
      /// the topic value. It also returns Ok if there are no subscribers and the value
      /// happens to be dropped. Publish() can not guarantee delivery in theory but in
      /// practice it should almost always deliver to subscribers.
      ///
      /// REQUIRES HEADER authorization: Momento auth token
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Momento.Protos.CacheClient.Pubsub._Empty> PublishAsync(global::Momento.Protos.CacheClient.Pubsub._PublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Publish, null, options, request);
      }
      /// <summary>
      /// Subscribe to notifications from a topic.
      ///
      /// You will receive a stream of values and (hopefully occasional) discontinuities.
      /// Values will appear as copies of the payloads you Publish() to the topic.
      ///
      /// REQUIRES HEADER authorization: Momento auth token
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Momento.Protos.CacheClient.Pubsub._SubscriptionItem> Subscribe(global::Momento.Protos.CacheClient.Pubsub._SubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to notifications from a topic.
      ///
      /// You will receive a stream of values and (hopefully occasional) discontinuities.
      /// Values will appear as copies of the payloads you Publish() to the topic.
      ///
      /// REQUIRES HEADER authorization: Momento auth token
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Momento.Protos.CacheClient.Pubsub._SubscriptionItem> Subscribe(global::Momento.Protos.CacheClient.Pubsub._SubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Subscribe, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override PubsubClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PubsubClient(configuration);
      }
    }

  }
}
#endregion
